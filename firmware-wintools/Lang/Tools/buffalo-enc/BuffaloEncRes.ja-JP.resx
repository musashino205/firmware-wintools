<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error.FailDecrypt" xml:space="preserve">
    <value>復号に失敗しました</value>
  </data>
  <data name="Error.FailEncrypt" xml:space="preserve">
    <value>暗号化に失敗しました</value>
  </data>
  <data name="Error.InvalidMagicLen" xml:space="preserve">
    <value>マジック長は {0} でなければなりません</value>
  </data>
  <data name="Error.LargeOffset" xml:space="preserve">
    <value>指定されたオフセット "{0}" は入力元ファイルサイズを超過しています</value>
  </data>
  <data name="Error.LongKey" xml:space="preserve">
    <value>指定されたキー "{0}" は長すぎます</value>
  </data>
  <data name="Error.LongProduct" xml:space="preserve">
    <value>指定されたプロダクト名 "{0}" は長すぎます</value>
  </data>
  <data name="Error.LongVersion" xml:space="preserve">
    <value>指定されたバージョン "{0}" は長すぎます</value>
  </data>
  <data name="Error.NoKey" xml:space="preserve">
    <value>キーが指定されていません</value>
  </data>
  <data name="Error.NoProduct" xml:space="preserve">
    <value>プロダクト名が指定されていません</value>
  </data>
  <data name="Error.NoVersion" xml:space="preserve">
    <value>バージョンが指定されていません</value>
  </data>
  <data name="FuncDesc" xml:space="preserve">
    <value>バッファロー製デバイスのファームウェアを暗号化/復号します</value>
  </data>
  <data name="Help.Options.d" xml:space="preserve">
    <value>  -d			復号モードを使用します
</value>
  </data>
  <data name="Help.Options.k" xml:space="preserve">
    <value>  -k &lt;キー&gt;		暗号化に用いる &lt;キー&gt; を指定します（デフォルト: "{0}"）
</value>
  </data>
  <data name="Help.Options.l" xml:space="preserve">
    <value>  -l			ロングステート 暗号化/復号メソッドを使用します
</value>
  </data>
  <data name="Help.Options.m" xml:space="preserve">
    <value>  -m &lt;マジック&gt;		暗号化に用いる &lt;マジック&gt; を指定します（デフォルト: "{1}"）
</value>
  </data>
  <data name="Help.Options.o2" xml:space="preserve">
    <value>  -O &lt;オフセット&gt;	ファイル内における暗号化されたデータのオフセットを指定します（復号用）
</value>
  </data>
  <data name="Help.Options.p" xml:space="preserve">
    <value>  -p &lt;プロダクト名&gt;	暗号化に用いる &lt;プロダクト名&gt; を指定します
</value>
  </data>
  <data name="help.Options.S" xml:space="preserve">
    <value>  -S &lt;サイズ&gt;		ファイル内における未暗号化データのサイズを指定します (暗号化用)
</value>
  </data>
  <data name="Help.Options.v" xml:space="preserve">
    <value>  -v &lt;バージョン&gt;	暗号化に用いる &lt;バージョン&gt; を指定します
</value>
  </data>
  <data name="Help.Options.F" xml:space="preserve">
    <value>  -F			チェックサム エラーを無視して復号します
</value>
  </data>
  <data name="Help.Usage" xml:space="preserve">
    <value>使用方法: firmware-wintools buffalo-enc [オプション...]
</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>===== buffalo-enc モード ({0}) =====</value>
  </data>
  <data name="Info.Cksum" xml:space="preserve">
    <value> チェックサム	: 0x{0:x}</value>
  </data>
  <data name="Info.DataLen" xml:space="preserve">
    <value> データ長	: {0} bytes</value>
  </data>
  <data name="Info.Decrypt" xml:space="preserve">
    <value>復号</value>
  </data>
  <data name="Info.Encrypt" xml:space="preserve">
    <value>暗号化</value>
  </data>
  <data name="Info.Key" xml:space="preserve">
    <value> キー		: '{0}'</value>
  </data>
  <data name="Info.Longstate" xml:space="preserve">
    <value> ロングステート	: {0}</value>
  </data>
  <data name="Info.Magic" xml:space="preserve">
    <value> マジック	: '{0}'</value>
  </data>
  <data name="Info.Product" xml:space="preserve">
    <value> プロダクト名	: '{0}'</value>
  </data>
  <data name="Info.Seed" xml:space="preserve">
    <value> シード値	: 0x{0,2:X}</value>
  </data>
  <data name="Info.Version" xml:space="preserve">
    <value> バージョン	: '{0}'</value>
  </data>
  <data name="Error.BigFile" xml:space="preserve">
    <value>指定されたファイルは大きすぎます（2GiB以上）</value>
  </data>
</root>