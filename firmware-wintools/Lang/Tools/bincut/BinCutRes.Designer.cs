//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace firmware_wintools.Lang.Tools {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BinCutRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BinCutRes() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("firmware_wintools.Lang.Tools.bincut.BinCutRes", typeof(BinCutRes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   -p and -P option cannot be specified at the same time に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Error_DualPad {
            get {
                return ResourceManager.GetString("Error.DualPad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   specified blocksize for padding is invalid に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Error_InvalidPadBSSize {
            get {
                return ResourceManager.GetString("Error.InvalidPadBSSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   padding size is smaller than the length of target data に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Error_SmallPadSize {
            get {
                return ResourceManager.GetString("Error.SmallPadSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   cut out firmware by length/offset and pad it by padding size or block size に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string FuncDesc {
            get {
                return ResourceManager.GetString("FuncDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///     -l &lt;length&gt;		cut out specified length from the input image
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Help_Options_Length {
            get {
                return ResourceManager.GetString("Help.Options.Length", resourceCulture);
            }
        }
        
        /// <summary>
        ///     -O &lt;offset&gt;		cut out from specified offset of the input image
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Help_Options_Offset {
            get {
                return ResourceManager.GetString("Help.Options.Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///     -p &lt;padding size&gt;	pad the input image to specified size
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Help_Options_Pad {
            get {
                return ResourceManager.GetString("Help.Options.Pad", resourceCulture);
            }
        }
        
        /// <summary>
        ///     -P &lt;blocksize&gt;	pad the input image with specified blocksize
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Help_Options_PadBS {
            get {
                return ResourceManager.GetString("Help.Options.PadBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Usage: {0}buffalo-enc [OPTIONS...]
        /// に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Help_Usage {
            get {
                return ResourceManager.GetString("Help.Usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   ===== bincut mode ===== に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Info {
            get {
                return ResourceManager.GetString("Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Length			: {0:N0} bytes
        ///			  (0x{0:X}) に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Info_length {
            get {
                return ResourceManager.GetString("Info.length", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Offset			: {0:N0} bytes
        ///			  (0x{0:X}) に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Info_offset {
            get {
                return ResourceManager.GetString("Info.offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Size (padding)		: {0:N0} bytes
        ///			  (0x{0:X}) に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Info_Pad {
            get {
                return ResourceManager.GetString("Info.Pad", resourceCulture);
            }
        }
        
        /// <summary>
        ///    Blocksize (padding)	: {0:N0} bytes
        ///			  (0x{0:X}) に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Info_PadBS {
            get {
                return ResourceManager.GetString("Info.PadBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///       {0}		: {1} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Main_FuncDesc_Fmt {
            get {
                return ResourceManager.GetString("Main.FuncDesc.Fmt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   the specified length is invalid, use default (fullsize - offset) に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Warning_InvalidLength {
            get {
                return ResourceManager.GetString("Warning.InvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   the specified offset exceeds the file length, use &apos;0&apos; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Warning_LargeOffset {
            get {
                return ResourceManager.GetString("Warning.LargeOffset", resourceCulture);
            }
        }
    }
}
