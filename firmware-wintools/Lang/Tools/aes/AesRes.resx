<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error.FailReadSalt" xml:space="preserve">
    <value>failed to read salt from input data</value>
  </data>
  <data name="Error.InvalidDataBlkLen" xml:space="preserve">
    <value>the length of target data is not a multiple of 16</value>
  </data>
  <data name="Error.InvalidIVHex" xml:space="preserve">
    <value>the specified IV is invalid for hex mode</value>
  </data>
  <data name="Error.InvalidIVLenHex" xml:space="preserve">
    <value>the length of specified IV is invalid for hex mode</value>
  </data>
  <data name="Error.InvalidKeyHex" xml:space="preserve">
    <value>the specified key is invalid for hex mode</value>
  </data>
  <data name="Error.InvalidKeyLenHex" xml:space="preserve">
    <value>the length of specified key is invalid for hex mode</value>
  </data>
  <data name="Error.LongIVLen" xml:space="preserve">
    <value>the length of specified IV exceeds 16 bytes</value>
  </data>
  <data name="Error.LongKeyLen" xml:space="preserve">
    <value>the length of specified key exceeds the key length {0} bytes</value>
  </data>
  <data name="Error.NoKey" xml:space="preserve">
    <value>no key specified</value>
  </data>
  <data name="FuncDesc" xml:space="preserve">
    <value>encrypt/decrypt firmware with 128/256 bit AES CBC</value>
  </data>
  <data name="Help.Options.d" xml:space="preserve">
    <value>  -d			use decryption mode
</value>
  </data>
  <data name="Help.Options.k" xml:space="preserve">
    <value>  -k &lt;key&gt;		use text &lt;key&gt; for encryption/decryption the image
</value>
  </data>
  <data name="Help.Options.K2" xml:space="preserve">
    <value>  -K &lt;key&gt;		use hex &lt;key&gt; for encryption/decryption the image
</value>
  </data>
  <data name="Help.Options.l" xml:space="preserve">
    <value>  -l &lt;length&gt;		encrypt/decrypt specified length of the input image
</value>
  </data>
  <data name="Help.Options.n" xml:space="preserve">
    <value>  -n			disable block padding at the end of target data</value>
  </data>
  <data name="Help.Options.O2" xml:space="preserve">
    <value>  -O &lt;offset&gt;		encrypt/decrypt from specified offset of the input image
</value>
  </data>
  <data name="Help.Options.p" xml:space="preserve">
    <value>  -p &lt;passphrase&gt;	use &lt;passphrase&gt; for encryption/decryption the image instead of key/iv (MD5)
</value>
  </data>
  <data name="Help.Options.s" xml:space="preserve">
    <value>  -s			use 128-bit key (default: 256-bit)
</value>
  </data>
  <data name="Help.Options.v" xml:space="preserve">
    <value>  -v &lt;iv&gt;		use text &lt;iv&gt; for encryption/decryption the image
</value>
  </data>
  <data name="Help.Options.V2" xml:space="preserve">
    <value>  -V &lt;iv&gt;		use hex &lt;iv&gt; for encryption/decryption the image
</value>
  </data>
  <data name="Help.Usage" xml:space="preserve">
    <value>Usage: {0}aes [OPTIONS...]
</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>===== aes mode ({0}) =====</value>
  </data>
  <data name="Info.Decrypt" xml:space="preserve">
    <value>decrypt</value>
  </data>
  <data name="Info.Encrypt" xml:space="preserve">
    <value>encrypt</value>
  </data>
  <data name="Info.iv" xml:space="preserve">
    <value> IV		: {0}
		  ({1})</value>
  </data>
  <data name="Info.iv2" xml:space="preserve">
    <value> IV		: {0} (hex)</value>
  </data>
  <data name="Info.key" xml:space="preserve">
    <value> Key		: {0}
		  ({1})</value>
  </data>
  <data name="Info.key2" xml:space="preserve">
    <value> Key		: {0} (hex)</value>
  </data>
  <data name="Info.len" xml:space="preserve">
    <value> Length		: {0:N0} bytes
		  (0x{0:X})</value>
  </data>
  <data name="Info.mode" xml:space="preserve">
    <value> Mode		: {0}</value>
  </data>
  <data name="Info.offset" xml:space="preserve">
    <value> Offset		: {0:N0} bytes
		  (0x{0:X})</value>
  </data>
  <data name="Info.salt" xml:space="preserve">
    <value> Salt		: {0} (hex)</value>
  </data>
  <data name="Main.FuncDesc.Fmt" xml:space="preserve">
    <value>    {0}			: {1}</value>
  </data>
  <data name="Warning.InvalidLength" xml:space="preserve">
    <value>the specified length is invalid, use default (fullsize - offset)</value>
  </data>
  <data name="Warning.LargeOffset" xml:space="preserve">
    <value>the specified offset exceeds the file length, use '0'</value>
  </data>
  <data name="Warning.NoIV" xml:space="preserve">
    <value>no iv specified, use default ('0')</value>
  </data>
  <data name="Warning.ShortEncLen" xml:space="preserve">
    <value>the length of the last block on the target data is shorter than 16 bytes, will padded by PKCS#7</value>
  </data>
</root>