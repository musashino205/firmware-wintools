# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Test tag & Build Release

on:
  push:
    tags: '*'

jobs:

  # Build with Debug configuration for Test
  dbg_build:

    strategy:
      matrix:
        Dbg_conf: [Debug]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: firmware-wintools
      Project_csproj_Path: firmware-wintools/firmware-wintools.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    - name: Build project (Debug)
      run: msbuild $env:Project_csproj_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.Dbg_conf }}

  # Build with Release configuration for Release
  rel_build:

    strategy:
      matrix:
        Rel_conf: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    needs: [dbg_build]

    env:
      Solution_Name: firmware-wintools
      Project_csproj_Path: firmware-wintools/firmware-wintools.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # ref for "Out-File": https://github.community/t/environmental-files-on-windows/137631
    - name: Get tag version
      run: |
        $rel_git_tag=$env:GITHUB_REF.Replace("refs/tags/", "")
        echo $rel_git_tag
        echo "REL_GIT_TAG=$rel_git_tag" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build project (Release)
      run: |
        msbuild $env:Project_csproj_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.Rel_conf }}

    - name: Rename folder and Cleanup unnecessary files
      if: success()
      run: |
        ren $env:Solution_Name\bin\Release $env:Solution_Name
        rm $env:Solution_Name\bin\$env:Solution_Name\*.pdb -ErrorAction $env:ErrAct
        rm $env:Solution_Name\bin\$env:Solution_Name\*.exe.config -ErrorAction $env:ErrAct
      env:
        ErrAct: SilentlyContinue

    # Upload the release binaries: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: ${{ env.Solution_Name }}_${{ env.REL_GIT_TAG }}
        path: ${{ env.Solution_Name }}\bin\${{ env.Solution_Name }}
        retention-days: 5
